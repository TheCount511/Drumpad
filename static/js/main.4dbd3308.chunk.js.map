{"version":3,"sources":["components/Switch/Switch.js","components/Slider/Slider.js","components/Drumpad/Drumpad.js","App.js","serviceWorker.js","index.js"],"names":["Switch","props","poweroff","power","name","run","disabled","backgroundColor","id","className","style","type","onChange","checked","Slider","min","max","step","volumeChange","value","volume","Drumpad","handlekeypress","event","keyCode","preventDefault","button","document","getElementById","classList","add","setTimeout","remove","handleButtonClick","display","sendData","audio","buttonKey","playAudio","state","addEventListener","this","removeEventListener","url","onClick","src","Component","bankOne","keyTrigger","bankTwo","App","togglePower","setState","String","fromCharCode","switchBank","bank","target","Math","round","clearDisplay","getDisplay","data","playSound","currentTime","playPromise","play","undefined","then","_","catch","error","console","log","bind","map","item","index","key","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4dbd3308.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles.css';\r\n\r\nconst Switch =(props)=>{\r\n\t\r\n\tlet poweroff\r\n\t    \tconst {power, name, run, disabled} = props\r\n\r\n\tif (props.power === false && props.name === 'Power' ){\r\n\t\t poweroff = {backgroundColor: 'gray'}\r\n\t}\r\n\r\n\treturn(\r\n\t\t\t\t<div id='switch-div'>\r\n\t\t\t\t<p>{name}</p>\r\n\t\t\t\t<label className=\"switch\" style={poweroff}>\r\n\t\t\t\t\t<input id='switch' type=\"checkbox\" onChange={run} checked={power} disabled={disabled}  />\r\n\t\t\t\t\t<span className=\"switch-slider\"></span>\r\n\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\n\r\nexport default Switch;","import React from 'react'\r\nimport '../styles.css';\r\n\r\nconst Slider = (props) => {\r\n    return (\r\n        <div className=\"slidecontainer\">\r\n          <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" onChange={props.volumeChange} value={props.volume} className=\"slider\" id=\"volume\" disabled={props.disabled}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Slider; ","import React, { Component } from 'react';\r\nimport '../styles.css';\r\n\r\n\r\nclass Drumpad extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handlekeypress)\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handlekeypress)\r\n    }\r\n\r\n\r\n    handlekeypress = (event) => {\r\n        if(!this.props.disabled){if (event.keyCode === this.props.keyCode) {\r\n                    event.preventDefault()\r\n                    const button = document.getElementById(this.props.id)\r\n                    button.classList.add(\"drum-pad-active\");\r\n                    setTimeout(()=>button.classList.remove(\"drum-pad-active\"), 100);\r\n                    this.handleButtonClick()\r\n                }}\r\n    }\r\n\r\n\r\n\r\n    handleButtonClick = () => {\r\n    \t        const display = this.props.id\r\n    \t        this.props.sendData(display)\r\n    \t\r\n    \t        const audio = document.getElementById(this.props.buttonKey)\r\n    \t        this.props.playAudio(audio)}\r\n\r\n\r\n\r\n    render() {\r\n        const { buttonKey, url, id, disabled } = this.props;\r\n\r\n        return (\r\n            <div id='button-pad' className=\"col-md-4 col-4 col-sm-4 px-1 py-2 text-center \">\r\n\t\t                        <button id={id} className='drum-pad' onClick={this.handleButtonClick} disabled={disabled}>{buttonKey}\r\n\t\t\t                        <audio className='clip' id={buttonKey} src={url}></audio>\r\n\t\t                        </button>\r\n\t                        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Drumpad;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Switch from './components/Switch/Switch';\r\nimport Slider from './components/Slider/Slider';\r\nimport Drumpad from './components/Drumpad/Drumpad'\r\n\r\nconst bankOne = [{\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Heater-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n}, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Heater-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n}, {\r\n    keyCode: 69,\r\n    keyTrigger: 'E',\r\n    id: 'Heater-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n}, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Heater-4',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n}, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Clap',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n}, {\r\n    keyCode: 68,\r\n    keyTrigger: 'D',\r\n    id: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n}, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: \"Kick-n'-Hat\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n}, {\r\n    keyCode: 88,\r\n    keyTrigger: 'X',\r\n    id: 'Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n}, {\r\n    keyCode: 67,\r\n    keyTrigger: 'C',\r\n    id: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n}];\r\n\r\nconst bankTwo = [{\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Chord-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n}, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Chord-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\r\n}, {\r\n    keyCode: 69,\r\n    keyTrigger: 'E',\r\n    id: 'Chord-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\r\n}, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Shaker',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\r\n}, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\r\n}, {\r\n    keyCode: 68,\r\n    keyTrigger: 'D',\r\n    id: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: 'Punchy-Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n}, {\r\n    keyCode: 88,\r\n    keyTrigger: 'X',\r\n    id: 'Side-Stick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\r\n}, {\r\n    keyCode: 67,\r\n    keyTrigger: 'C',\r\n    id: 'Snare',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\r\n}];\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            checked: true,\r\n            display: String.fromCharCode(160),\r\n            bank: bankOne,\r\n            disabled: false,\r\n            volume: 0.40\r\n        };\r\n        this.getDisplay = this.getDisplay.bind(this);\r\n        this.playSound = this.playSound.bind(this);\r\n    }\r\n\r\n    togglePower = (event) => {\r\n        if (this.state.checked === true) {\r\n            this.setState({ checked: false, disabled: true, display: String.fromCharCode(160) })\r\n        } else {\r\n            this.setState({ checked: true, disabled: false });\r\n        }\r\n    }\r\n\r\n    switchBank = (event) => {\r\n        if (this.state.bank === bankOne) {\r\n            this.setState({ bank: bankTwo, display: 'Smooth Piano Kit' })\r\n        } else {\r\n            this.setState({ bank: bankOne, display: 'Heater' });\r\n        }\r\n    }\r\n\r\n    volumeChange = (event) => {\r\n        this.setState({ volume: event.target.value, display: `Volume: ${Math.round(event.target.value * 100)}` })\r\n        setTimeout(() => this.clearDisplay(), 1000);\r\n    }\r\n\r\n    clearDisplay = () => {\r\n        this.setState({ display: String.fromCharCode(160) })\r\n    }\r\n    \r\n    getDisplay = (data) => {\r\n        this.setState({ display: data })\r\n    }\r\n\r\n    playSound = (audio) => {\r\n        audio.currentTime = 0\r\n        const playPromise = audio.play()\r\n        if (playPromise !== undefined) {\r\n            playPromise\r\n                .then(_ => {\r\n\r\n                })\r\n                .catch(error => {\r\n                    // Auto-play was prevented\r\n                    // Show paused UI.\r\n                    console.log(\"playback prevented\");\r\n                });\r\n        }\r\n        audio.volume = this.state.volume;\r\n    }\r\n\r\n\r\n    render() {\r\n        const { checked, volume, disabled, display, bank } = this.state;\r\n        const { togglePower, volumeChange, switchBank, getDisplay, playSound } = this;\r\n        const button = bank.map((item, index) => <Drumpad buttonKey={item.keyTrigger} url={item.url} sendData={getDisplay} keyCode={item.keyCode} id={item.id} key={`item${index}`} playAudio={playSound} disabled={disabled}/>)\r\n\r\n        return (\r\n            <div  className='container'>\r\n                    <div id='drum-machine'className=\"row\" >\r\n                        <div className=\"col-md-7 px-4 py-4\">\r\n                            <div className='row text-center mx-n1 my-2'>\r\n                                {button}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-5 text-center m-auto \">\r\n                                <Switch name={'Power'} run={togglePower} power={checked}/>\r\n                                <Slider volumeChange={volumeChange} volume={volume} disabled={disabled}/>\r\n                               <p id=\"display\">{display}</p>\r\n                                <Switch name={'Bank'} run={switchBank} disabled={disabled}/>\r\n                        </div>\r\n                    </div> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}